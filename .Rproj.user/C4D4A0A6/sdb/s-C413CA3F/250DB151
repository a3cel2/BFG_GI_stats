{
    "collab_server" : "",
    "contents" : "devtools::use_package('ROCR')\ndevtools::use_package('dplyr')\n\nrhombus_integration <- function(x, y) {\n  sum <- 0\n  for (i in 2:length(x)) {\n    base <- x[i] - x[i - 1]\n    mid_height <- mean(c(y[i], y[i - 1]))\n    sum <- sum + base * mid_height\n  }\n  return(sum)\n}\n\n\nst_onge_comparison_plot <- function(gi_data_old,\n                                    gi_data_new,\n                                    control_name = \"Z_GIS_ij.DMSO\",\n                                    condition_name = \"Z_GIS_ij.MMS\"){\n  par(mfrow = c(1, 2))\n  \n  gi_data_list <- list(gi_data_new, gi_data_old)\n  names(gi_data_list) <- c('new', 'old')\n  \n  \n  #Compare AUC\n  #gi_scores <- gi_data_new[, grep('^GIS', colnames(gi_data_new))]\n  for (condition in c(control_name, condition_name)) {\n    for (i in 1:length(gi_data_list)) {\n      gi_data <- gi_data_list[[i]]\n      gi_data_filtered <-\n        dplyr::filter(gi_data,\n                      SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n      \n      #gi_scores <- grep('^GIS', colnames(gi_data))]\n      \n      \n      if (condition == control_name) {\n        st_onge_class <- 'SOJ_Class_NoMMS'\n      }\n      if (condition == condition_name) {\n        st_onge_class <- 'SOJ_Class_MMS'\n      }\n      \n      labels_pos <- gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n      labels_neg <- gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n      z_scores_cond_pos <-\n        gi_data_filtered[, condition]#, collapse = '')]\n      z_scores_cond_neg <- -z_scores_cond_pos\n      \n      \n      perf_pos <-\n        ROCR::performance(ROCR::prediction(z_scores_cond_pos, labels_pos), 'sens', 'fpr')\n      perf_neg <-\n        ROCR::performance(ROCR::prediction(z_scores_cond_neg, labels_neg), 'sens', 'fpr')\n      \n      ROCR::plot(\n        perf_pos,\n        lwd = 2,\n        col = 'blue',\n        main = paste(names(gi_data_list)[i],condition)\n      )\n      lines(perf_neg@x.values[[1]],\n            perf_neg@y.values[[1]],\n            lwd = 2,\n            col = 'red')\n      \n      auc_neg <-\n        rhombus_integration(perf_neg@x.values[[1]], perf_neg@y.values[[1]])\n      auc_pos <-\n        rhombus_integration(perf_pos@x.values[[1]], perf_pos@y.values[[1]])\n      \n      text(0.8, 0.6, sprintf('AUC neg = %s', format(auc_neg, digits = 2)), col =\n             'red')\n      text(0.8, 0.4, sprintf('AUC pos = %s', format(auc_pos, digits = 2)), col =\n             'blue')\n      \n    }\n  }\n  \n  #Correlate with GI scores\n  for (condition in c(control_name,condition_name)) {\n    for (i in 1:length(gi_data_list)) {\n      gi_data <- gi_data_list[[i]]\n      if (condition == control_name) {\n        st_onge_e <- 'SOJ_E_NoMMS'\n      }\n      if (condition == condition_name) {\n        st_onge_e <- 'SOJ_E_MMS'\n      }\n      plot(gi_data[, st_onge_e], gi_data[, condition], pch = 16,\n           main= paste(names(gi_data_list)[i],condition), col = rgb(0,0,0,0.3),\n           xlab = 'St Onge E',ylab ='GIS')\n      lines(smooth.spline(gi_data[is.finite(gi_data[, st_onge_e]), st_onge_e], \n                          gi_data[is.finite(gi_data[, st_onge_e]), condition],\n                          penalty=10), col = 'blue')\n      abline(c(0,1),lwd=2,col='red')\n      correl <- cor(gi_data[, st_onge_e], gi_data[, condition],use='pair')\n      \n      text(0,0,sprintf('R = %s',format(correl,digits=2)),col='red',cex=1.5)\n      #stop()\n    }\n    \n    \n  }\n\n}\n\n\nprec_recall_vs_stonge <- function(gi_data,\n                                  score_cols = NULL,\n                                  control_name = \"GIS_ij.DMSO\",\n                                  condition_name = \"GIS_ij.MMS\",\n                                  fdr_prefix = \"FDR.Internal_ij\",\n                                  fdr_cutoff = 0.05,\n                                  xlims = NULL) {\n  gene1 <- sapply(gi_data$Barcode_i, function(x) {\n    strsplit(x, split = '_')[[1]][1]\n  })\n  \n  gene2 <- sapply(gi_data$Barcode_j, function(x) {\n    strsplit(x, split = '_')[[1]][1]\n  })\n  \n  if (is.null(score_cols)) {\n    score_cols <- grep('^GIS', colnames(gi_data))\n  }\n  scores <- gi_data[, score_cols]\n  for (condition in c(control_name, condition_name)) {\n    if (condition == control_name) {\n      st_onge_class <- 'SOJ_Class_NoMMS'\n    }\n    if (condition == condition_name) {\n      st_onge_class <- 'SOJ_Class_MMS'\n    }\n    \n    gi_data_filtered <-\n      dplyr::filter(gi_data,\n                    SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n    \n    \n    \n    scores_cond <- gi_data_filtered[, condition]\n    labels_pos <-\n      gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n    labels_neg <-\n      gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n    \n    \n    ##scores_cond_pos < - scores_cond[scores_cond > 0]\n    score_ind_pos <- sort(scores_cond, index.return = T)$ix\n    \n    scores_cond_pos <- scores_cond[score_ind_pos]\n    labels_pos <- labels_pos[score_ind_pos]\n    \n    \n    \n    prec_pos <- sapply(1:length(scores_cond_pos), function(i) {\n      sum(labels_pos[i:length(labels_pos)]) / (length(labels_pos) - i + 1)\n    })\n    fdr_pos <- 1 - prec_pos\n    \n    \n    \n    score_ind_neg <- sort(scores_cond, index.return = T, decreasing = T)$ix\n    \n    scores_cond_neg <- scores_cond[score_ind_neg]\n    labels_neg <- labels_neg[score_ind_neg]\n     prec_neg <- sapply(1:length(scores_cond), function(i) {\n      sum(labels_neg[i:length(labels_neg)]) / (length(labels_neg) - i + 1)\n    })\n    fdr_neg <- 1 - prec_neg\n    \n    drug <- strsplit(condition,split='\\\\.')[[1]][2]\n    fdr_col <- paste(c(fdr_prefix,drug),collapse='.')\n    \n    if (condition == control_name) {\n      if(is.null(xlims)){\n        xlims <-c(min(scores_cond_pos), max(scores_cond_pos))\n      }\n      \n      \n      plot(\n        scores_cond_pos[scores_cond_pos > 0],\n        prec_pos[scores_cond_pos > 0]*100,\n        type = 'l',\n        ylab = 'St.Onge Validation Rate (%)',\n        xlab = 'Z Cutoff',\n        main = 'GI Precision vs St. Onge',\n        #st_onge_class,\n        lwd = 2,\n        xlim = xlims)\n        \n        lines(scores_cond_neg[scores_cond_neg < 0],\n              prec_neg[scores_cond_neg < 0]*100,\n              lwd = 2)\n        \n        abline(v=min(scores_cond[scores_cond > 0 & gi_data_filtered[,fdr_col] <= fdr_cutoff]))\n        abline(v=max(scores_cond[scores_cond < 0 & gi_data_filtered[,fdr_col] <= fdr_cutoff]))\n        #abline(min(v=))\n      \n    } else{\n      lines(scores_cond_pos[scores_cond_pos > 0],\n            prec_pos[scores_cond_pos > 0]*100,\n            col = 'red',\n            lwd = 2)\n      lines(scores_cond_neg[scores_cond_neg < 0],\n            prec_neg[scores_cond_neg < 0]*100,\n            col = 'red',\n            lwd = 2)\n      abline(v=min(scores_cond[scores_cond > 0 & gi_data_filtered[,fdr_col] <= fdr_cutoff]),col='red')\n      abline(v=max(scores_cond[scores_cond < 0 & gi_data_filtered[,fdr_col] <= fdr_cutoff]),col='red')\n      \n    }\n  }\n}\n  \n",
    "created" : 1508183094006.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "330095219",
    "id" : "250DB151",
    "lastKnownWriteTime" : 1508429800,
    "last_content_update" : 1508429800031,
    "path" : "~/Dropbox/Roth Lab/projects/BFG_GI_stats/packages/BfgGiStats/R/st_onge_comparison_plots.R",
    "project_path" : "packages/BfgGiStats/R/st_onge_comparison_plots.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}