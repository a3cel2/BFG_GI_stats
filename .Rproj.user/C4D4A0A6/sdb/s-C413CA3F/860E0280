{
    "collab_server" : "",
    "contents" : "devtools::use_package('dplyr')\n\nupdate_gis <- function(gi_data,\n                       well_measured_cutoff = 100,\n                       g_wt_vec = c(12.62,8.34,8.44,7.04,7.7,7.84,7.5,7.76,6.94,6.28)) {\n  #Define special pairs\n  same_same <-\n    sapply(gi_data$Barcode_i, function(x) {\n      strsplit(x, split = '_')[[1]][1]\n    }) == sapply(gi_data$Barcode_j, function(x) {\n      strsplit(x, split = '_')[[1]][1]\n    })\n  \n  nn_pairs <-\n    gi_data$Type_of_gene_i == 'Neutral' &\n    gi_data$Type_of_gene_j == 'Neutral' &\n    gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'\n  \n  non_nn_unlinked_pairs <-\n    gi_data$Type_of_gene_i != 'Neutral' &\n    gi_data$Type_of_gene_j != 'Neutral' &\n    gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'\n  \n  \n  count_data <- gi_data[, grep('^C_', colnames(gi_data))]\n  condition_sums <- apply(count_data, 2, sum)\n  freq_data <- count_data / condition_sums\n  \n  \n  f_xy_data <- count_data / condition_sums\n  r_xy_data <- (f_xy_data / f_xy_data[, 1])[, 2:ncol(f_xy_data)]\n  g_xy_data <- t(t(log2(r_xy_data)) + g_wt_vec)\n  g_xy_wt <- apply(g_xy_data[nn_pairs,],2,median)\n  w_xy_data <- t(t(g_xy_data) / g_xy_wt)\n  \n  genes <- unique(unlist(gi_data[, 1:2]))\n\n  #Quick fix\n  w_xy_data[w_xy_data < 0] <- 0\n  \n  #Using mean here instead of median because\n  #otherwise standard deviation doesn't make sense\n  w_xy_single_genes <- t(sapply(genes, function(gene) {\n    criteria <-\n      gi_data[, 1] == gene &\n      gi_data$Type_of_gene_j == 'Neutral' |\n      gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'\n    criteria <-\n      criteria &\n      gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'\n    criteria <-\n      criteria &\n      gi_data$C_ij.HetDipl >= well_measured_cutoff\n    \n    return(apply(w_xy_data[criteria, ], 2, mean))\n  }))\n  \n  w_xy_error_single_genes <- t(sapply(genes, function(gene) {\n    criteria <-\n      gi_data[, 1] == gene &\n      gi_data$Type_of_gene_j == 'Neutral' |\n      gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'\n    criteria <-\n      criteria &\n      gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'\n    criteria <-\n      criteria &\n      gi_data$C_ij.HetDipl >= well_measured_cutoff\n      return(apply(w_xy_data[criteria, ], 2, function(x){sd(x)/sqrt(length(x))}))\n  }))\n  \n  #Quick fix\n  \n  \n  bc1 <- gi_data$Barcode_i\n  bc2 <- gi_data$Barcode_j\n  \n  gis <- t(sapply(1:nrow(w_xy_data), function(i) {\n    w_x <- w_xy_single_genes[bc1[i], ]\n    w_y <- w_xy_single_genes[bc2[i], ]\n    \n    w_xy <- w_xy_data[i, ]\n    \n    gis <- (w_xy) - (w_x * w_y)\n    \n    #gis <- log2((w_xy + 0.01)/((w_x * w_y) + 0.01))\n    \n    if(sum(is.na(gis) > 0)){\n      print(w_xy)\n      print(w_x)\n      print(w_y)\n      #print(c(w_xy,w_x,w_y))\n    }\n    \n    return(gis)\n  }))\n  \n  gi_uncertainty <- t(sapply(1:nrow(w_xy_data), function(i) {\n    w_x <- w_xy_single_genes[bc1[i], ]\n    w_y <- w_xy_single_genes[bc2[i], ]\n    \n    \n    w_x_error <- w_xy_error_single_genes[bc1[i], ]\n    w_y_error <- w_xy_error_single_genes[bc2[i], ]\n    \n    w_xy <- w_xy_data[i, ]\n    \n    \n    #Delta rule\n    prod_uncertainty <-\n      abs(w_x * w_y) * sqrt((w_x_error / w_x) ^ 2 + (w_y_error / w_y) ^ 2)\n    \n    #gis <- ((w_xy + 0.01)/((w_x * w_y) + 0.01))\n    \n    #prod_uncertainty <- (prod_uncertainty)/log(2)\n    \n    return(prod_uncertainty)\n  }))\n  \n  \n  \n  \n  gi_data[, grep('^GI', colnames(gi_data))] <-\n    gis\n  z_cols <-\n    grep('Class',\n         grep('^Z_GIS', colnames(gi_data), val = T),\n         invert = T,\n         val = T)\n  gi_data[, z_cols] <- gis / gi_uncertainty\n  \n  return(gi_data)\n}",
    "created" : 1508195246700.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "184913078",
    "id" : "860E0280",
    "lastKnownWriteTime" : 1508443087,
    "last_content_update" : 1508443087778,
    "path" : "~/Dropbox/Roth Lab/projects/BFG_GI_stats/packages/BfgGiStats/R/new_gis.R",
    "project_path" : "packages/BfgGiStats/R/new_gis.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}