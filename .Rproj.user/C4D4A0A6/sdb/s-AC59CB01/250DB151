{
    "collab_server" : "",
    "contents" : "devtools::use_package('ROCR')\ndevtools::use_package('dplyr')\n\n\n#Used for calculating AUC\n#' Trapezoid method for integration\ntrapezoid_integration <- function(x, y) {\n  area_sum <- 0\n  for (i in 2:length(x)) {\n    base <- x[i] - x[i - 1]\n    mid_height <- mean(c(y[i], y[i - 1]))\n    area_sum <- area_sum + base * mid_height\n  }\n  return(area_sum)\n}\n\n#' Plots St. Onge et al validation as a function of the internal FDR estimates\n#'\n#' @param gi_data input genetic interaction table\n#' @param control_name condition which corresponds to 'NoDrug' in the St onge data\n#' @param condition_name condition which corresponds to 'MMS' in the St onge data\n#' @param fdr_prefix pasted with control_name and condition_name to find the FDR columns\n#' @param z_prefix pasted with control_name and condition_name to find the Z columns\n#' @param fdr_cutoff used to draw 'cutoff' lines in the plot\n#' @param xlims plot x axis limits\n#' @param xlab plot x axis label\nprecision_vs_stonge <- function(gi_data,\n                                  control_name = \"NoDrug\",\n                                  condition_name = \"MMS\",\n                                  fdr_prefix = \"FDR.Internal_ij\",\n                                  z_prefix = \"Z_GIS_ij\",\n                                  fdr_cutoff = 0.05,\n                                  xlims = c(-5,5),\n                                  xlab = '-Log10 (Internal FDR)*sign(Z)') {\n  \n  for (condition in c(control_name, condition_name)) {\n    if (condition == control_name) {\n      st_onge_class <- 'SOJ_Class_NoMMS'\n    }\n    if (condition == condition_name) {\n      st_onge_class <- 'SOJ_Class_MMS'\n    }\n    \n    gi_data_filtered <-\n      dplyr::filter(gi_data,\n                    SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n    \n    \n    \n    fdr_column <- paste(c(fdr_prefix,condition),collapse='.')\n    z_column <- paste(c(z_prefix,condition),collapse='.')\n    \n    labels_pos <-\n      gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n    labels_neg <-\n      gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n    \n    scores_cond <- sign(gi_data_filtered[,z_column])*-log10(gi_data_filtered[,fdr_column])\n    \n    pos_perf <- ROCR::performance(ROCR::prediction(scores_cond, labels_pos), 'prec')\n    neg_perf <- ROCR::performance(ROCR::prediction(-scores_cond, labels_neg), 'prec')\n    \n    pos_cutoff <- pos_perf@x.values[[1]]\n    pos_precision <- pos_perf@y.values[[1]]\n    \n    neg_cutoff <- neg_perf@x.values[[1]]\n    neg_precision <- neg_perf@y.values[[1]]\n    \n    if (condition == control_name) {\n      if (is.null(xlims)) {\n        xlims <-\n          c(-1*neg_perf@x.values[[1]][2], pos_perf@x.values[[1]][2])\n      }\n      par(mar=c(4.5,5,3,1))\n      par(las=1)\n      plot(\n        pos_cutoff[pos_cutoff > 0],\n        (pos_precision*100)[pos_cutoff > 0],\n        type = 'l',\n        ylab = 'St.Onge Validation Rate (%)',\n        xlab = xlab,\n        main = 'GI Precision vs St. Onge',\n        lwd = 1,\n        xlim = xlims,\n        ylim=c(0,100))\n      lines(-neg_cutoff[neg_cutoff > 0],(neg_precision*100)[neg_cutoff > 0],lwd=1)\n    } else{\n      lines(pos_cutoff[pos_cutoff > 0],(pos_precision*100)[pos_cutoff > 0],lwd=1,col='red')\n      lines(-neg_cutoff[neg_cutoff > 0],(neg_precision*100)[neg_cutoff > 0],lwd=1,col='red')\n    }\n  }\n  \n  abline(v=-log10(fdr_cutoff), lty = 3, lwd = 0.7)\n  abline(v=log10(fdr_cutoff), lty = 3, lwd = 0.7)\n  \n  legend(xlims[1],50,legend=c(control_name, condition_name),fill=c('black','red'))\n}\n\n\n\n#' Plots FPR-Sensitivty curve versus the St. Onge data\n#'\n#' @param gi_data input genetic interaction table\n#' @param control_name condition which corresponds to 'NoMMS' in the St onge data\n#' @param condition_name condition which corresponds to 'MMS' in the St onge data\n#' @param fdr_prefix pasted with control_name and condition_name to find the FDR columns\n#' @param z_prefix pasted with control_name and condition_name to find the Z columns\n#' @param old_data if true, uses the raw GI scores, rather than FDR scores to do AUC\n#' @param gi_prefix pasted with control_name and condition_name to find the raw GI columns\n#' @param neg_col colour to draw performance curve for negative interactions\n#' @param pos_col colour to draw performance curve for positive interactions\n#' @param lwd line width in the plot\nst_onge_auc_plot <- function(gi_data,\n                             control_name = \"NoDrug\",\n                             condition_name = \"MMS\",\n                             fdr_prefix = \"FDR.Internal_ij\",\n                             z_prefix = \"Z_GIS_ij\",\n                             old_data = F,\n                             gi_prefix = \"GIS_ij\",\n                             neg_col = rgb(230/255,155/255,34/255),\n                             pos_col = rgb(90/255,179/255,228/255),\n                             lwd = 3){\n  \n  for (condition in c(control_name, condition_name)) {\n    \n    gi_data_filtered <-\n      dplyr::filter(gi_data,\n                    SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n    \n    if (condition == control_name) {\n      st_onge_class <- 'SOJ_Class_NoMMS'\n    }\n    if (condition == condition_name) {\n      st_onge_class <- 'SOJ_Class_MMS'\n    }\n    \n    fdr_column <- paste(c(fdr_prefix,condition),collapse='.')\n    z_column <- paste(c(z_prefix,condition),collapse='.')\n    gi_column <- paste(c(gi_prefix,condition),collapse='.')\n    \n    labels_pos <-\n      gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n    labels_neg <-\n      gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n    \n    if(old_data == F){\n      scores_cond <- sign(gi_data_filtered[,z_column])*-log10(gi_data_filtered[,fdr_column])\n    }else if(old_data == T){\n      scores_cond <- gi_data_filtered[,gi_column]\n    }\n    \n    perf_pos <-\n      ROCR::performance(ROCR::prediction(scores_cond, labels_pos), 'sens', 'fpr')\n    perf_neg <-\n      ROCR::performance(ROCR::prediction(-scores_cond, labels_neg), 'sens', 'fpr')\n    \n    par(las = 1)\n    plot(\n      perf_pos@x.values[[1]]*100,\n      perf_pos@y.values[[1]]*100,\n      lwd = lwd,\n      col = pos_col,\n      main = condition,\n      xlab = 'False Positive Rate (%)',\n      ylab = 'Sensitivity (%)',\n      type = 'l'\n    )\n    \n    lines(c(0,100),\n          c(0,100),\n          col='grey80',\n          lty = 5,\n          lwd = lwd/2)\n    \n    lines(perf_neg@x.values[[1]]*100,\n          perf_neg@y.values[[1]]*100,\n          lwd = lwd,\n          col = neg_col)\n    \n    auc_neg <-\n      trapezoid_integration(perf_neg@x.values[[1]], perf_neg@y.values[[1]])\n    auc_pos <-\n      trapezoid_integration(perf_pos@x.values[[1]], perf_pos@y.values[[1]])\n    \n    text(70, 30, sprintf('AUC neg = %s', format(auc_neg, digits = 2)), col =\n           neg_col)\n    text(70, 10, sprintf('AUC pos = %s', format(auc_pos, digits = 2)), col =\n           pos_col)\n  }\n}\n\n\n\n#' Creates a scatterplot of genetic interaction scores vs St. Onge\n#'\n#' @param gi_data input genetic interaction table\n#' @param control_name condition which corresponds to 'NoMMS' in the St onge data\n#' @param condition_name condition which corresponds to 'MMS' in the St onge data\n#' @param gi_prefix pasted with control_name and condition_name to find the raw GI columns\nst_onge_scatterplot <- function(gi_data,\n                                control_name = \"NoDrug\",\n                                condition_name = \"MMS\",\n                                gi_prefix = \"GIS_ij\"){\n  for (condition in c(control_name, condition_name)) {\n    if (condition == control_name) {\n      st_onge_e <- 'SOJ_E_NoMMS'\n      condtext <- 'no drug'\n    }\n    if (condition == condition_name) {\n      st_onge_e <- 'SOJ_E_MMS'\n      condtext <- 'MMS'\n    }\n    gi_column <- paste(c(gi_prefix,condition),collapse='.')\n    \n    par(las=1)\n    par(mar=c(4,5,1,1))\n    plot(gi_data[, st_onge_e],\n         gi_data[, gi_column],\n         pch = 16,\n         main= '',\n         cex = 0.8,\n         col = rgb(0,0,0,0.3),\n         xlab = '',\n         ylab = '')\n    par(las=3)\n    mtext(sprintf(\"Genetic Interaction Score\\n(this study); %s\",condtext),2,line=3)\n    par(las=1)\n    mtext(sprintf('Epsilon (St Onge et al); %s',condtext),1,line=2.5)\n    #c('Genetic Interaction Score','(this study)'))\n    cor_text <- sprintf('r = %s',format(cor(gi_data[, st_onge_e],\n                   gi_data[, gi_column], use='pair'),digits=2))\n    \n    text(min(gi_data[, st_onge_e], na.rm = T),\n         max(gi_data[, gi_column], na.rm = T),\n         cor_text,\n         adj=c(0,1))\n  }\n}\n\n\n\n#Legacy scripts not used to generate final figure, compares old and new GI data\n#on tpr-fpr AUC and scatterplot correlation wih St. Onge data\n\n# st_onge_comparison_plot <- function(gi_data_old,\n#                                     gi_data_new,\n#                                     control_name = \"GIS_ij.DMSO\",\n#                                     condition_name = \"GIS_ij.MMS\"){\n#   #par(mfrow = c(1, 2))\n#   \n#   gi_data_list <- list(gi_data_new, gi_data_old)\n#   names(gi_data_list) <- c('new', 'old')\n#   \n#   \n#   #Compare AUC\n#   #gi_scores <- gi_data_new[, grep('^GIS', colnames(gi_data_new))]\n#   for (condition in c(control_name, condition_name)) {\n#     for (i in 1:length(gi_data_list)) {\n#       gi_data <- gi_data_list[[i]]\n#       gi_data_filtered <-\n#         dplyr::filter(gi_data,\n#                       SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n#       \n#       #gi_scores <- grep('^GIS', colnames(gi_data))]\n#       \n#       \n#       if (condition == control_name) {\n#         st_onge_class <- 'SOJ_Class_NoMMS'\n#       }\n#       if (condition == condition_name) {\n#         st_onge_class <- 'SOJ_Class_MMS'\n#       }\n#       \n#       labels_pos <- gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n#       labels_neg <- gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n#       z_scores_cond_pos <-\n#         gi_data_filtered[, condition]#, collapse = '')]\n#       z_scores_cond_neg <- -z_scores_cond_pos\n#       \n#       \n#       perf_pos <-\n#         ROCR::performance(ROCR::prediction(z_scores_cond_pos, labels_pos), 'sens', 'fpr')\n#       perf_neg <-\n#         ROCR::performance(ROCR::prediction(z_scores_cond_neg, labels_neg), 'sens', 'fpr')\n#       \n#       ROCR::plot(\n#         perf_pos,\n#         lwd = 2,\n#         col = 'blue',\n#         main = paste(names(gi_data_list)[i],condition)\n#       )\n#       lines(perf_neg@x.values[[1]],\n#             perf_neg@y.values[[1]],\n#             lwd = 2,\n#             col = 'red')\n#       \n#       auc_neg <-\n#         trapezoid_integration(perf_neg@x.values[[1]], perf_neg@y.values[[1]])\n#       auc_pos <-\n#         trapezoid_integration(perf_pos@x.values[[1]], perf_pos@y.values[[1]])\n#       \n#       text(0.8, 0.6, sprintf('AUC neg = %s', format(auc_neg, digits = 2)), col =\n#              'red')\n#       text(0.8, 0.4, sprintf('AUC pos = %s', format(auc_pos, digits = 2)), col =\n#              'blue')\n#       \n#     }\n#   }\n#   \n#   #Correlate with GI scores\n#   for (condition in c(control_name,condition_name)) {\n#     for (i in 1:length(gi_data_list)) {\n#       gi_data <- gi_data_list[[i]]\n#       if (condition == control_name) {\n#         st_onge_e <- 'SOJ_E_NoMMS'\n#       }\n#       if (condition == condition_name) {\n#         st_onge_e <- 'SOJ_E_MMS'\n#       }\n#       plot(gi_data[, st_onge_e], gi_data[, condition], pch = 16,\n#            main= paste(names(gi_data_list)[i],condition), col = rgb(0,0,0,0.3),\n#            xlab = 'St Onge E',ylab ='GIS')\n#       lines(smooth.spline(gi_data[is.finite(gi_data[, st_onge_e]), st_onge_e], \n#                           gi_data[is.finite(gi_data[, st_onge_e]), condition],\n#                           penalty=10), col = 'blue')\n#       abline(c(0,1),lwd=2,col='red')\n#       correl <- cor(gi_data[, st_onge_e], gi_data[, condition],use='pair')\n#       \n#       text(0,0,sprintf('R = %s',format(correl,digits=2)),col='red',cex=1.5)\n#       #stop()\n#     }\n#     \n#     \n#   }\n# \n# }\n\n\n\n#Does Matthew's Correlation Coefficient calculation with St. Onge data\n\n# \n# mcc_vs_stonge <- function(gi_data,\n#                           score_cols = NULL,\n#                           control_name = \"GIS_ij.DMSO\",\n#                           condition_name = \"GIS_ij.MMS\",\n#                           fdr_prefix = \"FDR.Internal_ij\",\n#                           fdr_cutoff = 0.01,\n#                           xlims = NULL) {\n#   gene1 <- sapply(gi_data$Barcode_i, function(x) {\n#     strsplit(x, split = '_')[[1]][1]\n#   })\n#   \n#   gene2 <- sapply(gi_data$Barcode_j, function(x) {\n#     strsplit(x, split = '_')[[1]][1]\n#   })\n#   \n#   if (is.null(score_cols)) {\n#     score_cols <- grep('^GIS', colnames(gi_data))\n#   }\n#   scores <- gi_data[, score_cols]\n#   for (condition in c(control_name, condition_name)) {\n#     if (condition == control_name) {\n#       st_onge_class <- 'SOJ_Class_NoMMS'\n#     }\n#     if (condition == condition_name) {\n#       st_onge_class <- 'SOJ_Class_MMS'\n#     }\n#     \n#     gi_data_filtered <-\n#       dplyr::filter(gi_data,\n#                     SOJ_Class_NoMMS %in% c('NEUTRAL', 'AGGRAVATING', 'ALLEVIATING'))\n#     \n#     scores_cond <- gi_data_filtered[, condition]\n#     labels_pos <-\n#       gi_data_filtered[, st_onge_class] == 'ALLEVIATING'\n#     labels_neg <-\n#       gi_data_filtered[, st_onge_class] == 'AGGRAVATING'\n#     \n#     pos_perf <- ROCR::performance(ROCR::prediction(scores_cond, labels_pos), 'mat')\n#     neg_perf <- ROCR::performance(ROCR::prediction(-scores_cond, labels_neg), 'mat')\n#     \n#     pos_cutoff <- pos_perf@x.values[[1]]\n#     pos_precision <- pos_perf@y.values[[1]]\n#     \n#     neg_cutoff <- neg_perf@x.values[[1]]\n#     neg_precision <- neg_perf@y.values[[1]]\n#     \n#     if (condition == control_name) {\n#       if (is.null(xlims)) {\n#         xlims <-\n#           c(-1 * max(neg_perf@x.values[[1]]), max())\n#       }\n#       plot(\n#         pos_cutoff[pos_cutoff > 0],\n#         (pos_precision*100)[pos_cutoff > 0],\n#         type = 'l',\n#         ylab = 'MCC * 100',\n#         xlab = 'Z Cutoff',\n#         main = 'MCC vs St. Onge',\n#         lwd = 2,\n#         xlim = xlims,\n#         ylim=c(0,100))\n#       lines(-neg_cutoff[neg_cutoff > 0],(neg_precision*100)[neg_cutoff > 0],lwd=1)\n#     } else{\n#       lines(pos_cutoff[pos_cutoff > 0],(pos_precision*100)[pos_cutoff > 0],lwd=1,col='red')\n#       lines(-neg_cutoff[neg_cutoff > 0],(neg_precision*100)[neg_cutoff > 0],lwd=1,col='red')\n#     }\n#   }\n#   \n# }\n",
    "created" : 1508183094006.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "554395111",
    "id" : "250DB151",
    "lastKnownWriteTime" : 1514925039,
    "last_content_update" : 1514925039500,
    "path" : "~/Dropbox/Roth Lab/projects/BFG_GI_stats/packages/BfgGiStats/R/st_onge_comparison_plots.R",
    "project_path" : "packages/BfgGiStats/R/st_onge_comparison_plots.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}