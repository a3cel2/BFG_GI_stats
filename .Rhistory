reto[1]
reto <- c()
for(i in c(1:1000)){
cnt <- linked_ey[linked_ey$C_ij.HetDipl.sum >= i,grep('^FDR',colnames(linked_ey))]
#reto <- c(reto,median(unlist(cnt)))
prob <- (sum(cnt < 0.05)/sum(cnt < 100))
reto <- c(reto,prob)
}
reto[1]
reto[100]
head(gi_data)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
head(gi_data)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
args(st_onge_comparison_plot
)
st_onge_comparison_plot(gi_data_old,gi_data,control_name="Z_GIS_ij.NoDrug",condition_name=Z_GIS_ij.MMS"")
st_onge_comparison_plot(gi_data_old,gi_data,control_name="Z_GIS_ij.NoDrug",condition_name="Z_GIS_ij.MMS")
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
dim(gi_daat)
dim(gi_data)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
colnames(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = z_cols,
control_name = "FDR.Internal.NoDrug",
condition_name = "FDR.Internal.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
prec_recall_vs_stonge(
gi_data,
#score_cols = z_cols,
control_name = "FDR.Internal.NoDrug",
condition_name = "FDR.Internal.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
grep('FDR',colnames(gi_data),val=T)
prec_recall_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal.NoDrug",
condition_name = "FDR.Internal.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
prec_recall_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal.NoDrug",
condition_name = "FDR.Internal.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
score_cols = grep('FDR',colnames(gi_data))
control_name = "FDR.Internal.NoDrug"
colnames(gi-data)
colnames(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
par(mfrow=c(1,1))
prec_recall_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
prec_recall_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-5,5)
#fdr_cutoff = 1e-04
)
log10(0,05)
log10(0.05)
abline(v=log10(0.05))
abline(v==log10(0.05))
abline(v=-log10(0.05))
abline(h=75)
abline(h=73)
abline(h=70)
abline(h=75)
abline(h=77)
abline(h=88)
abline(h=85)
mccl_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
mcl_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
mcc_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-20,10)
#fdr_cutoff = 1e-04
)
mcc_vs_stonge(
gi_data,
score_cols = grep('FDR',colnames(gi_data)),
control_name = "FDR.Internal_ij.NoDrug",
condition_name = "FDR.Internal_ij.MMS",
xlims=c(-3,3)
#fdr_cutoff = 1e-04
)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
abline(v=1.3)
abline(v=-1.3)
log10(0.05)
abline(h=80)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
abline(h=80)
abline(v=1.3)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
table(gi_data$Z_GIS_ij.NoDrug_Class)
table(gi_data$Z_GIS_ij.MMS_Class)
table(gi_data$Z_GIS_ij.4NQO)
table(gi_data$Z_GIS_ij.4NQO_Class)
table(gi_data$Z_GIS_ij.CMPT_Class)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
table(gi_data$Z_GIS_ij.CMPT_Class)
table(gi_data$Z_GIS_ij.NoDrug_Class)
table(gi_data$Z_GIS_ij.MMS_Class)
table(gi_data$Z_GIS_ij.CSPL)
table(gi_data$Z_GIS_ij.CSPL_Class)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
table(gi_data$Z_GIS_ij.NoDrug_Class)
table(gi_data$Z_GIS_ij.MMS_Class)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
gi_data_R1 <- gi_data
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
gi_data_R2 <- gi_data
cbind(gi_data_R1$Z_GIS_ij.NoDrug_Class,gi_data_R2$Z_GIS_ij.NoDrug_Class)
table(cbind(gi_data_R1$Z_GIS_ij.NoDrug_Class,gi_data_R2$Z_GIS_ij.NoDrug_Class))
table(gi_data_R1$Z_GIS_ij.NoDrug_Class,gi_data_R2$Z_GIS_ij.NoDrug_Class)
table(gi_data_R1$Z_GIS_ij.MMS_Class,gi_data_R2$Z_GIS_ij.MMS_Class)
table(gi_data_R1$Z_GIS_ij.4NQO_Class,gi_data_R2$Z_GIS_ij.4NQO_Class)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
same_same <-
sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
}) == sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
ss_pairs <- gi_data[same_same,]
colnames(gi_data)
filter(ss_pairs,C_ij.HetDipl.sum < 100)
filter(ss_pairs,C_ij.HetDipl.sum < 100)[,1:2]
getwd()
list.files()
st_onge_results <- read.table('st_onge.tsv')
st_onge_results <- read.table('st_onge.tsv',sep='\t')
st_onge_results <- read.table('st_onge.tsv',sep='\t',head=t)
st_onge_results <- read.table('st_onge.tsv',sep='\t',head=T)
st_onge_results <- read.xsv('st_onge.tsv',sep='\t',head=T)
st_onge_results <- read.csv('st_onge.tsv',sep='\t',head=T)
head(st_onge_results)
table(st_onge_results$Interaction..P...0.01.)
6*=45
68+45
68+45+210
113/323
#Define special pairs
same_same <-
sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
}) == sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
nn_pairs <-
gi_data$Type_of_gene_i == 'Neutral' &
gi_data$Type_of_gene_j == 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
non_nn_unlinked_pairs <-
gi_data$Type_of_gene_i != 'Neutral' &
gi_data$Type_of_gene_j != 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
count_data <- gi_data[, grep('^C_', colnames(gi_data))] + 1
condition_sums <- apply(count_data, 2, sum)
freq_data <- count_data / condition_sums
f_xy_data <- count_data / condition_sums
r_xy_data <- (f_xy_data / f_xy_data[, 1])[, 2:ncol(f_xy_data)]
g_xy_data <- t(t(log2(r_xy_data)) + g_wt_vec)
#g_xy_data <- t(t(log2(r_xy_data)) - apply(log2(r_xy_data[same_same & gi_data$C_ij.HetDipl >= well_measured_cutoff,]),2,quantile,probs=0.5))
#Count error estimated by the poisson distribution
r_xy_error <-
r_xy_data * condition_sums[2:length(condition_sums)]/condition_sums[1] *
sqrt((sqrt(count_data[, 2:ncol(f_xy_data)]) /count_data[, 2:ncol(f_xy_data)])^2 +
(sqrt(count_data[, 1]) / count_data[, 1])^2)
#Error propagation to log
g_xy_error <- abs(r_xy_error/(r_xy_data*log(2)))
#g_xy_data <- t(t(log2(r_xy_data)) - apply(log2(r_xy_data),2,quantile,probs=0.01))
#
g_xy_wt <- apply(g_xy_data[nn_pairs,],2,mean)
g_wt_error <- apply(g_xy_data[nn_pairs,],2,function(x){sd(x)/sqrt(length(x))})
w_xy_data <- t(t(g_xy_data) / g_xy_wt)
genes <- unique(unlist(gi_data[, 1:2]))
#Quick fix
#w_xy_data[w_xy_data < 0] <- 0
#Using mean here instead of median because
#otherwise standard deviation doesn't make sense
w_xy_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
#print(which(criteria))
return(apply(w_xy_data[criteria, ], 2, mean))
}))
g_xy_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(g_xy_data[criteria, ], 2, mean))
}))
g_xy_error_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(g_xy_data[criteria, ], 2, function(x){sd(x)/sqrt(length(x))}))
}))
#Quick fix
bc1 <- gi_data$Barcode_i
bc2 <- gi_data$Barcode_j
gis <- t(sapply(1:nrow(w_xy_data), function(i) {
w_x <- w_xy_single_genes[bc1[i], ]
w_y <- w_xy_single_genes[bc2[i], ]
w_xy <- w_xy_data[i, ]
#Set to 0 if less than 0
w_x[w_x < 0] <- 0
w_y[w_y < 0] <- 0
w_xy[w_xy < 0] <- 0
gis <- (w_xy) - (w_x * w_y)
#gis <- log2((w_xy + 0.01)/((w_x * w_y) + 0.01))
if(sum(is.na(gis) > 0)){
print(w_xy)
print(w_x)
print(w_y)
#print(c(w_xy,w_x,w_y))
}
return(gis)
}))
gi_uncertainty <- t(sapply(1:nrow(w_xy_data), function(i) {
g_xy <- g_xy_data[i, ]
g_x <- g_xy_single_genes[bc1[i], ]
g_y <- g_xy_single_genes[bc2[i], ]
g_wt <- g_xy_wt
g_xy_error <- g_xy_error[i, ]
g_x_error <- g_xy_error_single_genes[bc1[i], ]
g_y_error <- g_xy_error_single_genes[bc2[i], ]
g_wt_error <- g_wt_error
numerator <- g_xy - g_x - g_y
#denominator <- g_wt
gis <- numerator/g_wt
numerator_error <- sqrt(g_xy_error^2 + g_x_error^2 + g_y_error^2)
gi_error <- abs(gis)*sqrt((numerator_error/numerator)^2 + (g_wt_error/g_wt)^2)
return(gi_error)
# w_x <- w_xy_single_genes[bc1[i], ]
# w_y <- w_xy_single_genes[bc2[i], ]
#
#
# w_x_error <- w_xy_error_single_genes[bc1[i], ]
# w_y_error <- w_xy_error_single_genes[bc2[i], ]
#
# w_xy <- w_xy_data[i, ]
#
#
# #Delta rule
# prod_uncertainty <-
#   abs(w_x * w_y) * sqrt((w_x_error / w_x) ^ 2 + (w_y_error / w_y) ^ 2)
#gis <- ((w_xy + 0.01)/((w_x * w_y) + 0.01))
#prod_uncertainty <- (prod_uncertainty)/log(2)
return(prod_uncertainty)
}))
g_wt_vec = c(12.62,8.34,8.44,7.04,7.7,7.84,7.5,7.76,6.94,6.28)
#Define special pairs
same_same <-
sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
}) == sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
nn_pairs <-
gi_data$Type_of_gene_i == 'Neutral' &
gi_data$Type_of_gene_j == 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
non_nn_unlinked_pairs <-
gi_data$Type_of_gene_i != 'Neutral' &
gi_data$Type_of_gene_j != 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
count_data <- gi_data[, grep('^C_', colnames(gi_data))] + 1
condition_sums <- apply(count_data, 2, sum)
freq_data <- count_data / condition_sums
f_xy_data <- count_data / condition_sums
r_xy_data <- (f_xy_data / f_xy_data[, 1])[, 2:ncol(f_xy_data)]
g_xy_data <- t(t(log2(r_xy_data)) + g_wt_vec)
#g_xy_data <- t(t(log2(r_xy_data)) - apply(log2(r_xy_data[same_same & gi_data$C_ij.HetDipl >= well_measured_cutoff,]),2,quantile,probs=0.5))
#Count error estimated by the poisson distribution
r_xy_error <-
r_xy_data * condition_sums[2:length(condition_sums)]/condition_sums[1] *
sqrt((sqrt(count_data[, 2:ncol(f_xy_data)]) /count_data[, 2:ncol(f_xy_data)])^2 +
(sqrt(count_data[, 1]) / count_data[, 1])^2)
#Error propagation to log
g_xy_error <- abs(r_xy_error/(r_xy_data*log(2)))
#g_xy_data <- t(t(log2(r_xy_data)) - apply(log2(r_xy_data),2,quantile,probs=0.01))
#
g_xy_wt <- apply(g_xy_data[nn_pairs,],2,mean)
g_wt_error <- apply(g_xy_data[nn_pairs,],2,function(x){sd(x)/sqrt(length(x))})
w_xy_data <- t(t(g_xy_data) / g_xy_wt)
genes <- unique(unlist(gi_data[, 1:2]))
#Quick fix
#w_xy_data[w_xy_data < 0] <- 0
#Using mean here instead of median because
#otherwise standard deviation doesn't make sense
w_xy_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
#print(which(criteria))
return(apply(w_xy_data[criteria, ], 2, mean))
}))
g_xy_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(g_xy_data[criteria, ], 2, mean))
}))
g_xy_error_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
#criteria <-
#  criteria &
#  gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(g_xy_data[criteria, ], 2, function(x){sd(x)/sqrt(length(x))}))
}))
#Quick fix
bc1 <- gi_data$Barcode_i
bc2 <- gi_data$Barcode_j
gis <- t(sapply(1:nrow(w_xy_data), function(i) {
w_x <- w_xy_single_genes[bc1[i], ]
w_y <- w_xy_single_genes[bc2[i], ]
w_xy <- w_xy_data[i, ]
#Set to 0 if less than 0
w_x[w_x < 0] <- 0
w_y[w_y < 0] <- 0
w_xy[w_xy < 0] <- 0
gis <- (w_xy) - (w_x * w_y)
#gis <- log2((w_xy + 0.01)/((w_x * w_y) + 0.01))
if(sum(is.na(gis) > 0)){
print(w_xy)
print(w_x)
print(w_y)
#print(c(w_xy,w_x,w_y))
}
return(gis)
}))
gi_uncertainty <- t(sapply(1:nrow(w_xy_data), function(i) {
g_xy <- g_xy_data[i, ]
g_x <- g_xy_single_genes[bc1[i], ]
g_y <- g_xy_single_genes[bc2[i], ]
g_wt <- g_xy_wt
g_xy_error <- g_xy_error[i, ]
g_x_error <- g_xy_error_single_genes[bc1[i], ]
g_y_error <- g_xy_error_single_genes[bc2[i], ]
g_wt_error <- g_wt_error
numerator <- g_xy - g_x - g_y
#denominator <- g_wt
gis <- numerator/g_wt
numerator_error <- sqrt(g_xy_error^2 + g_x_error^2 + g_y_error^2)
gi_error <- abs(gis)*sqrt((numerator_error/numerator)^2 + (g_wt_error/g_wt)^2)
return(gi_error)
# w_x <- w_xy_single_genes[bc1[i], ]
# w_y <- w_xy_single_genes[bc2[i], ]
#
#
# w_x_error <- w_xy_error_single_genes[bc1[i], ]
# w_y_error <- w_xy_error_single_genes[bc2[i], ]
#
# w_xy <- w_xy_data[i, ]
#
#
# #Delta rule
# prod_uncertainty <-
#   abs(w_x * w_y) * sqrt((w_x_error / w_x) ^ 2 + (w_y_error / w_y) ^ 2)
#gis <- ((w_xy + 0.01)/((w_x * w_y) + 0.01))
#prod_uncertainty <- (prod_uncertainty)/log(2)
return(prod_uncertainty)
}))
gis[nn_pairs,]
hist(gis[nn_pairs,1])
hist(gis[nn_pairs,1],breaks=100)
qqnorm(gis[nn_pairs,1])
qqnorm(gis[nn_pairs,1]/gi_uncertainty[nn_pairs,1])
qqnorm(gis[nn_pairs,2]/gi_uncertainty[nn_pairs,2])
qqnorm(gis[nn_pairs,3]/gi_uncertainty[nn_pairs,3])
qqnorm(gis[nn_pairs,4]/gi_uncertainty[nn_pairs,4])
dim(gis)
qqnorm(gis[nn_pairs,5]/gi_uncertainty[nn_pairs,5])
qqnorm(gis[nn_pairs,6]/gi_uncertainty[nn_pairs,6])
qqnorm(gis[nn_pairs,7]/gi_uncertainty[nn_pairs,7])
qqnorm(gis[nn_pairs,8]/gi_uncertainty[nn_pairs,8])
qqnorm(gis[nn_pairs,9]/gi_uncertainty[nn_pairs,9])
qqnorm(gis[nn_pairs,10]/gi_uncertainty[nn_pairs,10])
abline(c(0,1),col='red')
qqnorm(gis[nn_pairs,10]/gi_uncertainty[nn_pairs,10])
qqnorm(gis[nn_pairs,1]/gi_uncertainty[nn_pairs,1])
qqnorm(gis[nn_pairs,10]/gi_uncertainty[nn_pairs,10])
for(i in 1:10){qqnorm(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i],main=i)}
for(i in 1:10){qqnorm(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i],main=i);abline(c(0,1),col='red')}
shapiro.test(rnorm(10000))
shapiro.test(rnorm(5000))
shapiro.test(qqnorm(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
)
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i
for(i in 1:10){hist(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i],main=i)}
i
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 1
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 2
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 3
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 4
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 5
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
i <- 6
shapiro.test(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i])
plot(density(gis[nn_pairs,i]/gi_uncertainty[nn_pairs,i]))
choose(6000,10)
choose(6000,5)
choose(6000,3)
