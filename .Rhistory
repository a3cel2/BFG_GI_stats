w_i_error <- w_ij_error_single_genes[bc1[i], ]
w_j_error <- w_ij_error_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#Delta rule
#prod_uncertainty <-
#  abs(w_i * w_j) * sqrt((w_i_error / w_i) ^ 2 + (w_j_error / w_j) ^ 2)
ratio_error <- abs(w_i*w_j)^2
log_ratio_error <- ratio_error/log(2)
return(log_ratio_error)
#return(prod_uncertainty)
}))
gi_data[, grep('^GI', colnames(gi_data))] <-
gis
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = T,
val = T)
gis
apply(gis,2,hist)
apply(gis,2,hist,breaks=100)
gi_uncertainty
gi_data[, grep('^GI', colnames(gi_data))] <-
gis
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = T,
val = T)
gi_data[, z_cols] <- gis / gi_uncertainty
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
st_onge_comparison_plot(gi_data_old,gi_data)
prec_recall_vs_stonge(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = z_cols,
control_name = "Z_GIS_ij.DMSO",
condition_name = "Z_GIS_ij.MMS"
)
gi_data <- add_fdrs(gi_data)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
colnames(gi_data)
gi_data$Z_GIS_ij.CSPL
plot(gi_data$Z_GIS_ij.CSPL)
sum(is.na(gi_data$Z_GIS_ij.CSPL))
sum(is.na(gi_data$GIS_ij.CSPL))
sum(is.na(gi_data$GIS_ij.CMPT))
which(is.na(gi_data$GIS_ij.CMPT))
which(is.na(gi_data$GIS_ij.CMPT),arr.ind=T)
gi_data[which(is.na(gi_data$GIS_ij.CMPT),arr.ind=T),]
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
gi_data <- update_gis(gi_data,g_wt_vec = c(12.62,8.34,8.44,7.04,7.7,7.84,7.5,7.76,6.94,6.28))
gi_data <- add_fdrs(gi_data)
gi_data$FDR.Internal_ij.CMPT
plot(gi_data$FDR.Internal_ij.CMPT)
hist(gi_data$FDR.Internal_ij.CMPT)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
hist(gi_data$Z_GIS_ij.NoDrug
)
hist(gi_data$Z_GIS_ij.CMPT)
is.na(gi_data$Z_GIS_ij.CMPT)
sum(is.na(gi_data$Z_GIS_ij.CMPT))
sum(is.na(gi_data$GIS_ij.CMPT))
gi_data[which(is.na(gi_data$GIS_ij.CMPT),arr.ind=T),]
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
gi_data[which(is.na(gi_data$GIS_ij.CMPT),arr.ind=T),]
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
gi_data[which(is.na(gi_data$GIS_ij.CMPT),arr.ind=T),]
prec_recall_vs_stonge(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = z_cols,
control_name = "Z_GIS_ij.DMSO",
condition_name = "Z_GIS_ij.MMS",
xlims=c(-3,3)
)
well_measured_cutoff = 100
g_wt_vec = c(12.62,8.34,8.44,7.04,7.7,7.84,7.5,7.76,6.94,6.28)
same_same <-
sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
}) == sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
nn_pairs <-
gi_data$Type_of_gene_i == 'Neutral' &
gi_data$Type_of_gene_j == 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
non_nn_unlinked_pairs <-
gi_data$Type_of_gene_i != 'Neutral' &
gi_data$Type_of_gene_j != 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
count_data <- gi_data[, grep('^C_', colnames(gi_data))] + 1
condition_sums <- apply(count_data, 2, sum)
freq_data <- count_data / condition_sums
f_ij_data <- count_data / condition_sums
r_ij_data <- (f_ij_data / f_ij_data[, 1])[, 2:ncol(f_ij_data)]
genes <- unique(unlist(gi_data[, 1:2]))
neutral_genes <-
unique(unlist(
dplyr::filter(
gi_data,
Type_of_gene_i == 'Neutral' & Type_of_gene_j == 'Neutral'
)[, 1:2]
))
ddr_genes <-
unique(unlist(
dplyr::filter(
gi_data,
Type_of_gene_i != 'Neutral' & Type_of_gene_j != 'Neutral'
)[, 1:2]
))
r_ij_median_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
#wt_norm_freq_data[which(gi_data[,1]) == 1]
return(apply(r_ij_data[criteria, ], 2, median))
}))
r_ij_wt <-
apply(r_ij_median_single_genes[neutral_genes,], 2, median)
rel_g_ij <- log2(t(t(r_ij_data) / r_ij_wt))
#g_wt <- -apply(rel_g_ij,2,function(x){
#
#  x <- x[!(same_same) & gi_data$C_ij.HetDipl >= well_measured_cutoff]
#  min(x[is.finite(x)])
#
#})
if(is.null(g_wt_vec)){
g_wt <-
apply(-(rel_g_ij[same_same &
gi_data$C_ij.HetDipl >= well_measured_cutoff, ]), 2, median)
}else{
g_wt <- g_wt_vec
}
g_ij <- t(t(rel_g_ij) + g_wt)
g_ij[!is.finite(g_ij)] <- 0
w_ij_data <- t(t(g_ij) / g_wt)
#Using mean here instead of median because
#otherwise standard deviation doesn't make sense
w_ij_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(w_ij_data[criteria, ], 2, mean))
}))
w_ij_error_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(w_ij_data[criteria, ], 2, function(x){sd(x)}))
}))
#Quick fix
w_ij_data[w_ij_data < 0] <- 0
bc1 <- gi_data$Barcode_i
bc2 <- gi_data$Barcode_j
gis <- t(sapply(1:nrow(w_ij_data), function(i) {
w_i <- w_ij_single_genes[bc1[i], ]
w_j <- w_ij_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#gis <- (w_ij) - (w_i * w_j)
gis <- log2((w_ij + 0.01)/((w_i * w_j) + 0.01))
return(gis)
}))
gi_uncertainty <- t(sapply(1:nrow(w_ij_data), function(i) {
w_i <- w_ij_single_genes[bc1[i], ]
w_j <- w_ij_single_genes[bc2[i], ]
w_i_error <- w_ij_error_single_genes[bc1[i], ]
w_j_error <- w_ij_error_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#Delta rule
prod_uncertainty <-
abs(w_i * w_j) * sqrt((w_i_error / w_i) ^ 2 + (w_j_error / w_j) ^ 2)
return(prod_uncertainty)
}))
gi_data[, grep('^GI', colnames(gi_data))] <-
gis
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = T,
val = T)
gi_data[, z_cols] <- gis / gi_uncertainty
return(gi_data)
warnings()
gi_uncertainty
sum(is.na(gi_uncertainty))
sum(is.na(w_ij_error_single_genes
))
sum(is.na(gis))
gis
gis/gi_uncertainty
#Define special pairs
same_same <-
sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
}) == sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
nn_pairs <-
gi_data$Type_of_gene_i == 'Neutral' &
gi_data$Type_of_gene_j == 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
non_nn_unlinked_pairs <-
gi_data$Type_of_gene_i != 'Neutral' &
gi_data$Type_of_gene_j != 'Neutral' &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
count_data <- gi_data[, grep('^C_', colnames(gi_data))] + 1
condition_sums <- apply(count_data, 2, sum)
freq_data <- count_data / condition_sums
f_ij_data <- count_data / condition_sums
r_ij_data <- (f_ij_data / f_ij_data[, 1])[, 2:ncol(f_ij_data)]
genes <- unique(unlist(gi_data[, 1:2]))
neutral_genes <-
unique(unlist(
dplyr::filter(
gi_data,
Type_of_gene_i == 'Neutral' & Type_of_gene_j == 'Neutral'
)[, 1:2]
))
ddr_genes <-
unique(unlist(
dplyr::filter(
gi_data,
Type_of_gene_i != 'Neutral' & Type_of_gene_j != 'Neutral'
)[, 1:2]
))
r_ij_median_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
#wt_norm_freq_data[which(gi_data[,1]) == 1]
return(apply(r_ij_data[criteria, ], 2, median))
}))
r_ij_wt <-
apply(r_ij_median_single_genes[neutral_genes,], 2, median)
rel_g_ij <- log2(t(t(r_ij_data) / r_ij_wt))
#g_wt <- -apply(rel_g_ij,2,function(x){
#
#  x <- x[!(same_same) & gi_data$C_ij.HetDipl >= well_measured_cutoff]
#  min(x[is.finite(x)])
#
#})
if(is.null(g_wt_vec)){
g_wt <-
apply(-(rel_g_ij[same_same &
gi_data$C_ij.HetDipl >= well_measured_cutoff, ]), 2, median)
}else{
g_wt <- g_wt_vec
}
g_ij <- t(t(rel_g_ij) + g_wt)
g_ij[!is.finite(g_ij)] <- 0
w_ij_data <- t(t(g_ij) / g_wt)
#Using mean here instead of median because
#otherwise standard deviation doesn't make sense
w_ij_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(w_ij_data[criteria, ], 2, mean))
}))
w_ij_error_single_genes <- t(sapply(genes, function(gene) {
criteria <-
gi_data[, 1] == gene &
gi_data$Type_of_gene_j == 'Neutral' |
gi_data[, 2] == gene & gi_data$Type_of_gene_i == 'Neutral'
criteria <-
criteria &
gi_data$Remove_by_Chromosomal_distance_or_SameGene == 'no'
criteria <-
criteria &
gi_data$C_ij.HetDipl >= well_measured_cutoff
return(apply(w_ij_data[criteria, ], 2, function(x){sd(x)}))
}))
#Quick fix
w_ij_data[w_ij_data < 0] <- 0
bc1 <- gi_data$Barcode_i
bc2 <- gi_data$Barcode_j
gis <- t(sapply(1:nrow(w_ij_data), function(i) {
w_i <- w_ij_single_genes[bc1[i], ]
w_j <- w_ij_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#gis <- (w_ij) - (w_i * w_j)
gis <- log2((w_ij + 0.01)/((w_i * w_j) + 0.01))
if(is.na(gis)){
print(c(w_ij,w_i,w_j))
}
return(gis)
}))
gi_uncertainty <- t(sapply(1:nrow(w_ij_data), function(i) {
w_i <- w_ij_single_genes[bc1[i], ]
w_j <- w_ij_single_genes[bc2[i], ]
w_i_error <- w_ij_error_single_genes[bc1[i], ]
w_j_error <- w_ij_error_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#Delta rule
prod_uncertainty <-
abs(w_i * w_j) * sqrt((w_i_error / w_i) ^ 2 + (w_j_error / w_j) ^ 2)
return(prod_uncertainty)
}))
gi_data[, grep('^GI', colnames(gi_data))] <-
gis
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = T,
val = T)
gi_data[, z_cols] <- gis / gi_uncertainty
gis <- t(sapply(1:nrow(w_ij_data), function(i) {
w_i <- w_ij_single_genes[bc1[i], ]
w_j <- w_ij_single_genes[bc2[i], ]
w_ij <- w_ij_data[i, ]
#gis <- (w_ij) - (w_i * w_j)
gis <- log2((w_ij + 0.01)/((w_i * w_j) + 0.01))
if(sum(is.na(gis) > 0)){
print(w_ij)
print(w_i)
print(w_j)
#print(c(w_ij,w_i,w_j))
}
return(gis)
}))
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
grep('^GIS',colnames(gi_data))
gi_data[,grep('^GIS',colnames(gi_data))] <- 2^gi_data[,grep('^GIS',colnames(gi_data))]
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
st_onge_comparison_plot(gi_data_old,gi_data)
st_onge_comparison_plot(gi_data_old,gi_data)
par(mfrow=c(1,1))
prec_recall_vs_stonge(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = z_cols,
control_name = "Z_GIS_ij.DMSO",
condition_name = "Z_GIS_ij.MMS",
xlims=c(-3,3)
)
head(gi_data)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
st_onge_comparison_plot(gi_data_old,gi_data)
par(mfrow=c(1,1))
prec_recall_vs_stonge(gi_data)
prec_recall_vs_stonge(
gi_data,
score_cols = z_cols,
control_name = "Z_GIS_ij.DMSO",
condition_name = "Z_GIS_ij.MMS",
xlims=c(-3,3)
)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/scratch/analyze_shu_gis.R', echo=TRUE)
gi_data <-
dplyr::filter(gi_data, Remove_by_Chromosomal_distance_or_SameGene == 'no', C_ij.HetDipl > 100)
shu_complex <- c('CSM2','PSY3','SHU2','SHU1')
gi_data$gene1 <- sapply(gi_data$Barcode_i, function(x) {
strsplit(x, split = '_')[[1]][1]
})
gi_data$gene2 <- sapply(gi_data$Barcode_j, function(x) {
strsplit(x, split = '_')[[1]][1]
})
gi_data$Pair <- sapply(1:length(gi_data$gene1),function(i){
paste(sort(c(gi_data$gene1[i],gi_data$gene2[i])),collapse='_')
})
#gi_data$Barcode_j <- gene2
#gi_data <- gi_data %>% group_by(Pair) %>% select(c(1,2,grep('^GIS', colnames(gi_data)))) %>% summarize_each(funs(mean))
#stop()
shu_data <- filter(gi_data, gene1 %in% shu_complex & gene2 %in% shu_complex)
shu_data <- shu_data %>% group_by(Pair) %>% dplyr::select(grep('^GIS', colnames(shu_data))) %>% summarize_each(funs(mean))
positive_conditions_shu <- apply(shu_data[,grep('^GIS', colnames(shu_data))],1,function(x){names(which(x > pos_cut))})
names(positive_conditions_shu) <- shu_data$Pair
mag1_data <-
filter(
gi_data,
gene1 %in% c(shu_complex, 'SLX4') &
gene2 == 'MAG1' |
gene2 %in% c(shu_complex, 'SLX4') & gene1 == 'MAG1'
)
mag1_data <-
mag1_data %>% group_by(Pair) %>% dplyr::select(grep('^GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
negative_conditions_mag1 <-
apply(mag1_data[, grep('^GIS', colnames(mag1_data))], 1, function(x) {
names(which(x < neg_cut))
})
names(negative_conditions_mag1) <- mag1_data$Pair
slx4_data <-
filter(
gi_data,
gene1 %in% c(shu_complex, 'MAG1') &
gene2 == 'SLX4' |
gene2 %in% c(shu_complex, 'MAG1') & gene1 == 'SLX4'
)
slx4_data <-
slx4_data %>% group_by(Pair) %>% dplyr::select(grep('^GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
negative_conditions_slx4 <-
apply(slx4_data[, grep('^GIS', colnames(slx4_data))], 1, function(x) {
names(which(x < neg_cut))
})
names(negative_conditions_slx4) <- slx4_data$Pair
#mag1_data <- filter(gi_data, gene1 %in% shu_complex & gene2 == 'MAG1' | )
slx4_data
shu_data <- filter(gi_data, gene1 %in% shu_complex & gene2 %in% shu_complex)
shu_data <- shu_data %>% group_by(Pair) %>% dplyr::select(grep('^Z_GIS', colnames(shu_data))) %>% summarize_each(funs(mean))
positive_conditions_shu <- apply(shu_data[,grep('^Z_GIS', colnames(shu_data))],1,function(x){names(which(x > pos_cut))})
names(positive_conditions_shu) <- shu_data$Pair
shu_data
mag1_data <-
filter(
gi_data,
gene1 %in% c(shu_complex, 'SLX4') &
gene2 == 'MAG1' |
gene2 %in% c(shu_complex, 'SLX4') & gene1 == 'MAG1'
)
mag1_data <-
mag1_data %>% group_by(Pair) %>% dplyr::select(grep('^Z_GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
warnings
mag1_data <-
mag1_data %>% dplyr::group_by(Pair) %>% dplyr::select(grep('^Z_GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
mag1_data <-
dplyr::filter(
gi_data,
gene1 %in% c(shu_complex, 'SLX4') &
gene2 == 'MAG1' |
gene2 %in% c(shu_complex, 'SLX4') & gene1 == 'MAG1'
)
mag1_data <-
mag1_data %>% dplyr::group_by(Pair) %>% dplyr::select(grep('^Z_GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
mag1_data
warnings()
abline(v=-0.7,lwd=3)
slx4_data <-
filter(
gi_data,
gene1 %in% c(shu_complex, 'MAG1') &
gene2 == 'SLX4' |
gene2 %in% c(shu_complex, 'MAG1') & gene1 == 'SLX4'
)
slx4_data <-
slx4_data %>% group_by(Pair) %>% dplyr::select(grep('^Z_GIS', colnames(gi_data))) %>% summarize_each(funs(mean))
slx4_data
shu_data
mag1_data
slx4_data
shu_data <- filter(gi_data, gene1 %in% shu_complex & gene2 %in% shu_complex)
shu_data
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = F,
val = T)
apply(gi_data[,z_cols],2,table)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
apply(gi_data[,z_cols],2,table)
z_cols <-
grep('Class',
grep('^Z_GIS', colnames(gi_data), val = T),
invert = F,
val = T)
apply(gi_data[,z_cols],2,table)
600/2658
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
