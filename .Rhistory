clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=15))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
#meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=0,family="binomial")
#meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=100)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results)))
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
preds_cv_all <- cross_validated_glm(merged_data,all_data,conditions)
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
plot(p1)
preds_cv_mms <- cross_validated_glm(merged_data,all_data,c('MMS','MMS'))
p2 <- performance(prediction(preds_cv_mms,all_data$func),'prec','rec')
plot(p2)
abline(v=0.9)
abline(h=0.9)
abline(h=0.8)
abline(h=0.8)
abline(h=0.9)
abline(v=0.7)
abline(v=0.65)
abline(v=0.67)
abline(v=0.67)
abline(v=0.75)
abline(v=0.75)
plot(performance(prediction(preds_cv_all,all_data$func),'mat'))
plot(performance(prediction(preds_cv_mms,all_data$func),'mat'))
mms_data <- all_data[,c('func',grep('MMS',colnames(all_data),val=T))]
mms_data_st_onge <- merged_data[,c('Sig_GO_link','z.Sxy.Sx.','z.Sxy.Sy.','Epsilon','Congruence')]
mms_data_st_onge[,2:ncol(mms_data_st_onge)] <- apply(mms_data_st_onge[,2:ncol(mms_data_st_onge)],2,scale)
colnames(mms_data_st_onge)[1] <- 'func'
pred <- glm(func ~., data = mms_data, family=binomial(link='logit'))
plot(performance(prediction(pred$fitted.values,all_data$func),'tpr','fpr'))
pred_st_onge <- glm(func ~., data = mms_data_st_onge, family=binomial(link='logit'))
plot(performance(prediction(pred_st_onge$fitted.values,all_data$func),'tpr','fpr'))
pred_full <- glm(func ~., data = all_data, family=binomial(link='logit'))
plot(performance(prediction(pred_full$fitted.values,all_data$func),'tpr','fpr'))
cross_validated_glm <- function(merged_data,all_data,conditions){
eks <- as.matrix(all_data[,-1])
why <- as.matrix(all_data[,1])
bof <- all_data
clusterExport(cl,'all_data')
clusterExport(cl,'conditions')
clusterEvalQ(cl, library("glmnet"))
clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=5))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
#meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=0,family="binomial")
#meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=100)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results)))
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
preds_cv_all <- cross_validated_glm(merged_data,all_data,conditions)
pred_st_onge <- glm(func ~., data = mms_data_st_onge, family=binomial(link='logit'))
plot(performance(prediction(pred_st_onge$fitted.values,all_data$func),'prec','rec'))
head(mms_data_st_onge)
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
plot(p1)
cross_validated_glm <- function(merged_data,all_data,conditions){
eks <- as.matrix(all_data[,-1])
why <- as.matrix(all_data[,1])
bof <- all_data
clusterExport(cl,'all_data')
clusterExport(cl,'conditions')
clusterEvalQ(cl, library("glmnet"))
clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=20))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
#meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=0,family="binomial")
#meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=100)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results)))
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
preds_cv_all <- cross_validated_glm(merged_data,all_data,conditions)
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
plot(p1)
cross_validated_glm <- function(merged_data,all_data,conditions){
eks <- as.matrix(all_data[,-1])
why <- as.matrix(all_data[,1])
bof <- all_data
clusterExport(cl,'all_data')
clusterExport(cl,'conditions')
clusterEvalQ(cl, library("glmnet"))
clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=10))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
#meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=0,family="binomial")
#meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=100)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results)))
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
preds_cv_all <- cross_validated_glm(merged_data,all_data,conditions)
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
plot(p1)
df <- cbind(rnorm(1000),rnorm(1000),rnorm(1000))
head(df)
df <- as.data.frame(df)
colnames(df)[1] <- 'func'
fastAdaboost::adaboost(func~.,data=df,nIter=10)
head(df)
my_df <- df
fastAdaboost::adaboost(func~.,data=my_df,nIter=10)
my_df <- cbind(my_df,rnorm(1000))
head(my_df)
my_df$func
my_df$func <- sample(c(0,1),replace=T,1000)
fastAdaboost::adaboost(func~.,data=my_df,nIter=10)
fastAdaboost::adaboost(func~.,data=my_df,nIter=100)
fastAdaboost::adaboost(func~.,data=my_df,nIter=1000)
w_cols <- grep('^W_[xy]{1,}\\',colnames(merged_data),val=T)
w_cols <- grep('^W_[xy]{1,}',colnames(merged_data),val=T)
e_vold
w_cols
z_cols <- grep('^Z_',colnames(merged_data),val=T)
z_cols <- grep('Class',z_cols,invert=T,val=T)
gi_cols <- grep('^GIS_',colnames(merged_data),val=T)
fdr_cols <- grep('^FDR',colnames(merged_data),val=T)
w_cols <- grep('^W_[xy]{1,}',colnames(merged_data),val=T)
all_data <-
as.data.frame(cbind(merged_data$Sig_GO_link, lul2, merged_data[, c(z_cols, w_cols, gi_cols, fdr_cols)], z_x, z_y))
colnames(all_data)[1] <- 'func'
head(all_data)
dim(all_data)
mms_data <- all_data[,c('func',grep('MMS',colnames(all_data),val=T))]
mms_data_st_onge <- merged_data[,c('Sig_GO_link','z.Sxy.Sx.','z.Sxy.Sy.','Epsilon','Congruence')]
mms_data_st_onge[,2:ncol(mms_data_st_onge)] <- apply(mms_data_st_onge[,2:ncol(mms_data_st_onge)],2,scale)
colnames(mms_data_st_onge)[1] <- 'func'
pred <- glm(func ~., data = mms_data, family=binomial(link='logit'))
plot(performance(prediction(pred$fitted.values,all_data$func),'tpr','fpr'))
pred_st_onge <- glm(func ~., data = mms_data_st_onge, family=binomial(link='logit'))
plot(performance(prediction(pred_st_onge$fitted.values,all_data$func),'prec','rec'))
pred_full <- glm(func ~., data = all_data, family=binomial(link='logit'))
plot(performance(prediction(pred_full$fitted.values,all_data$func),'tpr','fpr'))
cross_validated_glm <- function(merged_data,all_data,conditions){
eks <- as.matrix(all_data[,-1])
why <- as.matrix(all_data[,1])
bof <- all_data
clusterExport(cl,'all_data')
clusterExport(cl,'conditions')
clusterEvalQ(cl, library("glmnet"))
clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=1000))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=meta_predictor_optim_lambda,family="binomial")
#meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=100)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results)))
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
preds_cv_all <- cross_validated_glm(merged_data,all_data,conditions)
p1 <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
plot(p1)
plot(p1)
pred_st_onge <- glm(func ~., data = mms_data_st_onge, family=binomial(link='logit'))
plot(performance(prediction(pred_st_onge$fitted.values,all_data$func),'prec','rec'))
lines(p1@x.values[[1]],p1@y.values[[1]])
lines(p1@x.values[[1]],p1@y.values[[1]],col='red',lwd=2)
preds_cv_mms <- cross_validated_glm(merged_data,all_data,c('NoDrug','DMSO','MMS'))
p2 <- performance(prediction(preds_cv_mms,all_data$func),'prec','rec')
plot(p2)
lines(p2@x.values[[1]],p2@y.values[[1]],col='grey',lwd=2)
plot(preds_cv_all)
plot(preds_cv_all,all_data$func)
cross_validated_glm <- function(merged_data,all_data,conditions){
eks <- as.matrix(all_data[,-1])
why <- as.matrix(all_data[,1])
bof <- all_data
clusterExport(cl,'all_data')
clusterExport(cl,'conditions')
clusterEvalQ(cl, library("glmnet"))
clusterEvalQ(cl, library("randomForest"))
clusterEvalQ(cl, library("fastAdaboost"))
eks <- parSapply(cl,1:nrow(merged_data),function(i){
print(i)
cut_eks <- eks[(1:nrow(all_data))[-i],]
cut_why <- why[(1:nrow(all_data))[-i],]
cut_bof <- bof[(1:nrow(all_data))[-i],]
left_out <- eks[i,,drop=F]
#ey <- fastAdaboost::adaboost(func~.,data=cut_bof,nIter=100)
#return(predict(ey,left_out)$prob[,2])
#Balance
#crit <- which(cut_why == 1)
#crit <- c(crit,which(cut_why == 0)[1:length(crit)])
#cut_eks <- cut_eks[crit,]
#cut_why <- cut_why[crit]
initial_predictors <- lapply(conditions,function(condition){
#cut_eks_cond <- cut_eks[,grep(condition,colnames(cut_eks))]
crit <- grep(condition,colnames(cut_eks), val= T)#colnames(cut_eks) %in% c(condition)
cut_eks_cond <- cut_eks[,crit]
cut_bof_cond <- cut_bof[,c('func',crit)]
return(fastAdaboost::adaboost(func~.,data=cut_bof_cond,nIter=10))
#optim_lambda <- cv.glmnet(cut_eks_cond,cut_why,family="binomial")$lambda.min
#return(glmnet(cut_eks_cond,cut_why,lambda=optim_lambda,family="binomial"))
#return(randomForest(cut_eks_cond,as.factor(cut_why)))
})
initial_predictors <<- initial_predictors
#print(initial_predictors)
initial_prediction_results <- sapply(1:length(conditions),function(i){
#print(i)
#cut_eks_cond <- cut_eks[,grep(conditions[i],colnames(cut_eks))]
crit <- grep(conditions[i],colnames(cut_eks))#colnames(cut_eks) %in% c(conditions[i])
cut_eks_cond <- cut_eks[,crit]
#as.numeric(as.vector(predict(initial_predictors[[i]],cut_eks_cond)))
#predict(initial_predictors[[i]],cut_eks_cond,type='prob')[,2]
predict(initial_predictors[[i]],cut_eks_cond)$prob[,2]
})
for_ada <- cbind(cut_why,initial_prediction_results)
colnames(for_ada)[1] <- 'func'
for_ada <- as.data.frame(for_ada)
#meta_predictor_optim_lambda <- cv.glmnet(initial_prediction_results,cut_why,family="binomial")$lambda.min
#meta_predictor <<- glmnet(initial_prediction_results,cut_why,lambda=meta_predictor_optim_lambda,family="binomial")
meta_predictor <- fastAdaboost::adaboost(func~.,data=for_ada,nIter=10)
#return(5)
left_out <- eks[i,]
#left_out <<- left_out
cv_initial_prediction_results <- sapply(1:length(conditions),function(i){
crit <- grep(conditions[i],names(left_out))#names(left_out) %in% c(conditions[i])
cut_eks_cond <- left_out[crit]#grep(conditions[i],names(left_out))]
#predict(initial_predictors[[i]],t(cut_eks_cond))
predict(initial_predictors[[i]],t(cut_eks_cond))$prob[,2]
})
#return(5)
return(predict(meta_predictor,t(cv_initial_prediction_results))$prob[,2])
#ey <- predict(glm_pred,eks[i,,drop=F])
#return(ey)
#pred_full <- glm(func ~., data = cut_data, family=binomial(link='logit'))
#return(predict(pred_full,all_data[i,]))
})
return(eks)
}
p1_n <- performance(prediction(preds_cv_all,all_data$func),'prec','rec')
preds_cv_all_n <- cross_validated_glm(merged_data,all_data,conditions)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
head(gi_data)
gi_data %>% group_by(Barcode_x,Barcode_y) %>% summarize(n())
table(gi_data %>% group_by(Barcode_x,Barcode_y) %>% summarize(n()))
table(gi_data %>% group_by(Barcode_x,Barcode_y) %>% summarize(n())$int)
as.data.frame(gi_data %>% group_by(Barcode_x,Barcode_y) %>% summarize(n())
)
ey <- as.data.frame(gi_data %>% group_by(Barcode_x,Barcode_y) %>% summarize(n()))
head(ey)
ey$n()
ey$`n()``
``
ey$`n()`
table(ey$`n()`)
head(gi_data)
grep('SWC',gi_data$Barcode_x)
grep('SWC',gi_data$Barcode_y)
source('~/Dropbox/Roth Lab/projects/BFG_GI_stats/scripts/master.R', echo=TRUE)
grep('SWC',gi_data$Barcode_y)
grep('SWC',gi_data$Barcode_x)
